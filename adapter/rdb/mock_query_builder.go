// Code generated by mockery v2.9.4. DO NOT EDIT.

package rdb

import (
	usecase "github.com/mkaiho/go-todo-sample/usecase"
	mock "github.com/stretchr/testify/mock"
)

// MockQueryBuilder is an autogenerated mock type for the QueryBuilder type
type MockQueryBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *MockQueryBuilder) Build() (Query, usecase.UseCaseError) {
	ret := _m.Called()

	var r0 Query
	if rf, ok := ret.Get(0).(func() Query); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Query)
		}
	}

	var r1 usecase.UseCaseError
	if rf, ok := ret.Get(1).(func() usecase.UseCaseError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(usecase.UseCaseError)
		}
	}

	return r0, r1
}

// From provides a mock function with given fields: tableName
func (_m *MockQueryBuilder) From(tableName string) QueryBuilder {
	ret := _m.Called(tableName)

	var r0 QueryBuilder
	if rf, ok := ret.Get(0).(func(string) QueryBuilder); ok {
		r0 = rf(tableName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(QueryBuilder)
		}
	}

	return r0
}

// Join provides a mock function with given fields: query, args
func (_m *MockQueryBuilder) Join(query string, args ...interface{}) QueryBuilder {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 QueryBuilder
	if rf, ok := ret.Get(0).(func(string, ...interface{}) QueryBuilder); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(QueryBuilder)
		}
	}

	return r0
}

// Select provides a mock function with given fields: columnNames
func (_m *MockQueryBuilder) Select(columnNames ...string) QueryBuilder {
	_va := make([]interface{}, len(columnNames))
	for _i := range columnNames {
		_va[_i] = columnNames[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 QueryBuilder
	if rf, ok := ret.Get(0).(func(...string) QueryBuilder); ok {
		r0 = rf(columnNames...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(QueryBuilder)
		}
	}

	return r0
}

// Where provides a mock function with given fields: query, args
func (_m *MockQueryBuilder) Where(query string, args ...interface{}) QueryBuilder {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 QueryBuilder
	if rf, ok := ret.Get(0).(func(string, ...interface{}) QueryBuilder); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(QueryBuilder)
		}
	}

	return r0
}
